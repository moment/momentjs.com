#!/usr/bin/env node

global.util = require("util");
var argv = require('optimist').argv,
  cleanCss = require('../index'),
  fs = require('fs'),
  path = require('path');

var options = {
  source: null,
  target: null
};
var cleanOptions = {};
var fromStdin = !process.env['__DIRECT__'] && process.stdin.readable;

if (argv.o) options.target = argv.o;
if (argv._) options.source = argv._[0];
if (argv.e) cleanOptions.removeEmpty = true;

if (argv.v) {
  var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
  util.puts(JSON.parse(packageConfig).version);
  process.exit(0);
}

if (argv.h || argv.help || (!fromStdin && argv._.length == 0)) {
  global.util.print('usage: cleancss [-e] -o <output-file> <input-file>\n');
  process.exit(0);
}

if (options.source) {
  fs.readFile(options.source, 'utf8', function(error, text) {
    if (error) throw error;
    output(cleanCss.process(text));
  });
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var text = '';
  stdin.on('data', function(chunk) { text += chunk; });
  stdin.on('end', function() { output(cleanCss.process(text, cleanOptions)); });
}

function output(cleaned) {
  if (options.target) {
    var out = fs.createWriteStream(options.target, { flags: 'w', encoding: 'utf-8', mode: 0644 });
    out.write(cleaned);
    out.end();
  } else {
    process.stdout.write(cleaned);
  }
};
