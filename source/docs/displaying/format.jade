p The most robust display option is 
  code moment.fn.format
  | . It takes a string of tokens and replaces them with their corresponding values from the Date object.
pre var a = moment([2010, 1, 14, 15, 25, 50, 125]);\n
  | a.format("dddd, MMMM Do YYYY, h:mm:ss a"); // "Sunday, February 14th 2010, 3:25:50 pm"
  | a.format("ddd, hA");                       // "Sun, 3PM"
table.table.table-striped.table-bordered
  tbody
    tr
      th Token
      th Output
    tr
      td
        b Month
      td
    tr
      td M
      td 1 2 ... 11 12
    tr
      td Mo
      td 1st 2nd ... 11th 12th
    tr
      td MM
      td 01 02 ... 11 12
    tr
      td MMM
      td Jan Feb ... Nov Dec
    tr
      td MMMM
      td January February ... November December
    tr
      td
        b Day of Month
      td
    tr
      td D
      td 1 2 ... 30 30
    tr
      td Do
      td 1st 2nd ... 30th 31st
    tr
      td DD
      td 01 02 ... 30 31
    tr
      td
        b Day of Year
      td
    tr
      td DDD
      td 1 2 ... 364 365
    tr
      td DDDo
      td 1st 2nd ... 364th 365th
    tr
      td DDDD
      td 001 002 ... 364 365
    tr
      td
        b Day of Week
      td
    tr
      td d
      td 0 1 ... 5 6
    tr
      td do
      td 0th 1st ... 5th 6th
    tr
      td ddd
      td Sun Mon ... Fri Sat
    tr
      td dddd
      td Sunday Monday ... Friday Saturday
    tr
      td
        b Week of Year
      td
    tr
      td w
      td 1 2 ... 52 53
    tr
      td wo
      td 1st 2nd ... 52nd 53rd
    tr
      td ww
      td 01 02 ... 52 53
    tr
      td
        b Year
      td
    tr
      td YY
      td 70 71 ... 29 30
    tr
      td YYYY
      td 1970 1971 ... 2029 2030
    tr
      td
        b AM/PM
      td
    tr
      td A
      td AM PM
    tr
      td a
      td am pm
    tr
      td
        b Hour
      td
    tr
      td H
      td 0 1 ... 22 23
    tr
      td HH
      td 00 01 ... 22 23
    tr
      td h
      td 1 2 ... 11 12
    tr
      td hh
      td 01 02 ... 11 12
    tr
      td
        b Minute
      td
    tr
      td m
      td 0 1 ... 58 59
    tr
      td mm
      td 00 01 ... 58 59
    tr
      td
        b Second
      td
    tr
      td s
      td 0 1 ... 58 59
    tr
      td ss
      td 00 01 ... 58 59
    tr
      td 
        b Timezone
      td
    tr
      td z or zz
      td EST CST ... MST PST
        br
        br
        span.label.label-info Note:
        |  as of 
        span.label 1.6.0
        | , the z/zz format tokens have been deprecated. 
        a(href="https://github.com/timrwood/moment/issues/162") Read more about it here.
    tr
      td Z
      td -07:00 -06:00 ... +06:00 +07:00
    tr
      td ZZ
      td -0700 -0600 ... +0600 +0700
        br
        br
        | Z and ZZ are available in version 
        span.label 1.2.0
    tr
      td
        b Localized date format
      td
    tr
      td LT
      td 8:30 PM
        br
        br
        | LT is available in version 
        span.label 1.3.0
    tr
      td L
      td 07/10/1986
    tr
      td LL
      td July 10 1986
    tr
      td LLL
      td July 10 1986 8:30 PM
    tr
      td LLLL
      td Saturday, July 10 1986 8:30 PM
        br
        br
        | L, LL, LLL, LLLL are available in version 
        span.label 1.3.0
p To escape characters in format strings, you can use a backslash before any character. NOTE: if you are using a string literal, you will need to escape the backslash, hence the double backslash below.
pre moment().format('\\\\L'); // outputs 'L'
p To escape multiple characters, you can wrap the characters in square brackets.
pre moment().format('[today] DDDD'); // 'today Sunday'
p 
  span.label.label-info Note:
  |  While these date formats are very similar to LDML date formats, there are a few minor differences regarding day of month, day of year, and day of week.
p For a breakdown of a few different date formatting tokens, see 
  a(href="https://docs.google.com/spreadsheet/ccc?key=0AtgZluze7WMJdDBOLUZfSFIzenIwOHNjaWZoeGFqbWc&hl=en_US#gid=0") this chart of date formatting tokens.
p To compare moment.js date formatting speeds against other libraries, check out 
  a(href="http://jsperf.com/date-formatting") http://jsperf.com/date-formatting
  |  .
p Baron Schwartz wrote a pretty cool date formatter that caches formatting functions to avoid expensive regex or string splitting. It's so much faster than any of the other libraries, that it's best to compare it on its own, rather than pollute the "best of the uncompiled" formatting libs.
p Here's the 
  a(href="http://jsperf.com/momentjs-vs-xaprb") moment.js vs xaprb
  |  performance tests, and here is the
  a(href="http://www.xaprb.com/blog/2005/12/12/javascript-closures-for-runtime-efficiency/") article describing his methods.
p
  span.label.label-info Note:
  |  Version 
  span.label 1.7.0
  |  changed the formatter to use cached functions similar to Baron Schwartz' formatter.
p Here are 
  a(href="http://jsperf.com/momentjs-cached-format-functions") the performance improvements
  |  and 
  a(href="http://jsperf.com/date-formatting/8") the comparison against other libraries
  |.
p If you are more comfortable working with strftime instead of LDML-like parsing tokens, you can use Ben Oakes' plugin 
  code moment-strftime
  |  .
p It is available on npm.
pre npm install moment-strftime
p The repository is located at 
  a(href="https://github.com/benjaminoakes/moment-strftime") benjaminoakes/moment-strftime
p
  span.label.label-info Note:
  |  As of version
  span.label 1.5.0
  | , calling this function without any parameters will output ISO-8601.
p It will use 
  code moment.defaultFormat
  |  to format the moment, which by default is 
  code YYYY-MM-DDTHH:mm:ssZ
  | .
